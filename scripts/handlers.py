# importing modules, db engines and long_dialoug_textes from the imports folder
from imports.imports import datetime, bot, pd, re
from imports.config_db import asmi, text, DataBaseMixin
from imports.phrases import start_text, help_text

# importing functions from the scripts folder
from scripts.processors import show_date, show_title_4category, get_user_settings, pick_usernews_dict, \
    show_full_news


def user_digest(username: int, parse_date: str = str(datetime.now().date()), part_number: int = 0):
    """
    Sends the user news digest according to his request and settings
    The date and time interval of the last digest requested by the user are recorded in a separate table in the database
    –ù–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥–±–æ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π (–¥–∞–π–¥–∂–µ—Å—Ç) —Å–æ–≥–ª–∞—Å–Ω–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    –î–∞—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –±–∞–∑—ã
    """
    input_date = datetime.strptime(parse_date, '%Y-%m-%d').date()
    greeting = {
        1: '—É—Ç—Ä–µ–Ω–Ω—è—è',
        2: '–¥–Ω–µ–≤–Ω–∞—è',
        3: '–≤–µ—á–µ—Ä–Ω—è—è',
        4: '–Ω–æ—á–Ω–∞—è'
    }

    # check for availability of digests at a given time
    if input_date > datetime.now().date() or input_date < datetime.strptime('2022-06-28', '%Y-%m-%d').date():
        bot.send_message(username,
                         f'ü§ñüìó –í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É –∏–∑ –¥–∞–ª—ë–∫–æ–≥–æ –±—É–¥—É—â–µ–≥–æ –∏–ª–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –ø—Ä–æ—à–ª–æ–≥–æ, –∞ —Ç—É—Ç —è –±–µ—Å—Å–∏–ª–µ–Ω')
    else:
        known_users = pd.read_sql('SELECT username FROM users', asmi).username.to_list()
        digestinfo = {'username': username, 'digest_date': parse_date, 'part_number': part_number}
        digestinfo_df = pd.DataFrame(digestinfo, index=[0])

        user_categories, news_amount, is_subscribed, is_header = get_user_settings(username)
        date_df = show_date(parse_date, part_number)

        if username in known_users:
            first_name = pd.read_sql(f"SELECT first_name FROM users WHERE username = '{username}'", asmi).first_name[0]
            user_news_dict = pick_usernews_dict(date_df, username)
            with asmi.begin() as conn:
                conn.execute(
                    text(
                        f"UPDATE user_digest "
                        f"SET part_number='{part_number}', digest_date='{parse_date}' "
                        f"WHERE username = '{username}'"))

        else:
            first_name = username
            user_news_dict = pick_usernews_dict(date_df)
            digestinfo_df.to_sql(name='user_digest', con=asmi, if_exists='append', index=False)

        if part_number != 0:
            my_news = f'ü§ñ: {first_name}, –ø—Ä–∏–≤–µ—Ç!\n\n–¢–≤–æ—è {greeting[part_number]} –ø–æ–¥–±–æ—Ä–∫–∞ –Ω–∞\n' \
                      f'{datetime.strptime(parse_date, "%Y-%m-%d").strftime("%d %B %Y")}: üëá\n'
        else:
            my_news = f'ü§ñ: {first_name}, –ø—Ä–∏–≤–µ—Ç!\n\n–¢–≤–æ—è –ø–æ–¥–±–æ—Ä–∫–∞ –∑–∞\n' \
                      f'{datetime.strptime(parse_date, "%Y-%m-%d").strftime("%d %B %Y")}: üëá\n'

        for i, category in enumerate(user_categories):
            russian_title = \
                pd.read_sql(f"SELECT russian_title FROM categories WHERE category = '{category}'",
                            asmi).russian_title[0]
            emoj = pd.read_sql(f"SELECT emoj FROM categories WHERE category = '{category}'", asmi).emoj[0]
            category_news = show_title_4category(user_news_dict, category)
            if category_news:
                category_title = f'\n{emoj} {i + 1}. {russian_title.capitalize()}:\n'
                my_news += category_title
                for labels, news in category_news.items():
                    my_news += f'{labels}. {news}\n'

        bot.send_message(username, my_news)

        if is_subscribed is False:
            bot.send_message(username,
                             f'üìå –ü–æ –ª—é–±–æ–º—É –∑–∞–≥–æ–ª–æ–≤–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: \n'
                             f'–æ—Ç–ø—Ä–∞–≤—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n'
                             f'("5 7" –Ω–∞–ø—Ä–∞–≤–∏—Ç 7-—É—é –Ω–æ–≤–æ—Å—Ç—å 5-–æ–π —Ä—É–±—Ä–∏–∫–∏)')


def get_full_news(username: int, message: str):
    """
    By user requested news coordinate it gives full news and links to it
    –ü–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤—ã–¥–∞—ë—Ç –ø–æ–ª–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ—ë
    """

    digest_date = pd.read_sql(f"SELECT digest_date FROM user_digest WHERE username = '{username}'", asmi).digest_date[
        0]
    digest_part = pd.read_sql(f"SELECT part_number FROM user_digest WHERE username = '{username}'", asmi).part_number[
        0]
    markdown = """*bold text*"""
    try:
        user_categories, news_amount, is_subscribed, is_header = get_user_settings(username)
        category_number, label = map(int, message.split(' '))
        category = user_categories[category_number - 1]
        date_df = show_date(str(digest_date), digest_part)
        if is_subscribed is True:
            user_news_dict = pick_usernews_dict(date_df, username)
        else:
            user_news_dict = pick_usernews_dict(date_df)
        news_title = user_news_dict[category][['title']].loc[label].title
        full_news = show_full_news(user_news_dict, category, label)
        full_digest = f'ü§ñ {full_news[0]} ü§ñ\n\n*{news_title}*\n\n{full_news[1].replace(news_title + ". ", "")}' \
                      f'\n\nüëá –°–ú–ò –∏ –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∏ üëá'

        bot.send_message(username, full_digest, parse_mode="Markdown")
        regex_url = re.compile('https://t.me/[-_a-z]*$')
        clean_links = [link for link in full_news[2] if
                       not link.startswith(('tg://resolve?domain=', 'https://t.me/+')) and not regex_url.search(link)]
        clean_links = [link.split('?')[0] if not link.startswith('https://www.youtube.com/watch') else link for link
                       in clean_links]
        for link in clean_links:
            bot.send_message(username, link)

    except KeyError:
        bot.send_message(username, f'‚ö† –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏.\n'
                                   f'üìó –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑, –∏–ª–∏ –ø–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫ –±–æ—Ç—É (–∫–æ–º–∞–Ω–¥–∞ "help")')


def redefine_user_settings(username: int, categories_letter: str, news_amount: int) -> pd.DataFrame:
    """
    Overrides user's settings regarding the categories of news they receive and the number of news items they receive
    New user settings are recorded in a separate database or updated

    –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—É—á–∞–µ–º—ã—Ö –∏–º –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –±–∞–∑—É –∏–ª–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è
    """
    subscribed_users = pd.read_sql(f"SELECT username FROM user_settings WHERE is_subscribed is True", asmi)
    subscribed_users = subscribed_users.username.to_list()

    if username in subscribed_users:
        category_df = pd.read_sql(f"SELECT category, russian_title FROM categories", con=asmi)
        new_category = [category_df.category[category_df.russian_title.str.startswith(el.lower())].iloc[0] for el in
                        categories_letter]

        user_settings = pd.read_sql(f"SELECT * FROM user_settings WHERE username = '{username}'", asmi)
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ False, –∞ –∑–∞—Ç–µ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º True —Ç–æ–ª—å–∫–æ —Ç–µ–º –∏–∑ –Ω–∏—Ö, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_settings[['technology', 'science', 'economy', 'entertainment', 'sports', 'society']] = 'False'
        for category in new_category:
            user_settings[category].iloc[0] = True
        user_settings['news_amount'].iloc[0] = news_amount

        is_subscribed = user_settings.is_subscribed.iloc[0]
        news_amount = user_settings.news_amount.iloc[0]
        show_header = user_settings.show_header.iloc[0]
        technology = user_settings.technology.iloc[0]
        science = user_settings.science.iloc[0]
        economy = user_settings.economy.iloc[0]
        entertainment = user_settings.entertainment.iloc[0]
        sports = user_settings.sports.iloc[0]
        society = user_settings.society.iloc[0]
        with asmi.begin() as conn:
            conn.execute(text(
                f"UPDATE "
                f"user_settings "
                f"SET "
                f"is_subscribed='{is_subscribed}', "
                f"news_amount='{news_amount}',"
                f"show_header='{show_header}',"
                f"technology='{technology}', "
                f"science='{science}', "
                f"economy='{economy}', "
                f"entertainment='{entertainment}', "
                f"sports='{sports}', "
                f"society='{society}' "
                f"WHERE "
                f"username = '{username}'"))
        # user_settings.to_sql(name='user_settings', con=asmi, if_exists='append', index=False)
        return user_settings


# Handlers functions
@bot.message_handler(commands=['start'])
def handle_start(message):
    username = message.chat.id
    bot.send_message(username, start_text)


@bot.message_handler(commands=['help'])
def handle_help(message):
    """
    Displays a message with instructions for the bot
    –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∫ –±–æ—Ç—É
    """
    username = message.chat.id
    bot.send_message(username, help_text)


@bot.message_handler(commands=['subscribe'])
def handle_subscribe(message):
    """
    Collects user information and writes it to the database
    –°–æ–±–∏—Ä–∞–µ—Ç —Å–≤–µ–¥–µ–Ω–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø–∏—à–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """

    username = message.chat.id
    nickname = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    subscribe_date = str(datetime.now().date())
    success_subscribed_text = (f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, {nickname}, —Å–ø–∞—Å–∏–±–æ! ‚ù§\n\n"
                               "–¢–µ–ø–µ—Ä—å 4 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å —Ç–µ–±–µ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å —Å–≤–µ–∂–∞—è –ø–æ—Ä—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
                               "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–≤–æ–¥–∫–∞: \n"
                               "- –≤—Å–µ —Ç–∏–ø—ã –Ω–æ–≤–æ—Å—Ç–µ–π (–∫—Ä–æ–º–µ –ø–æ–ª–∏—Ç–∏–∫–∏); \n"
                               "- –ø–æ —Ç—Ä–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n"
                               "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–∂–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n\n"
                               "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!")

    user_dict = {'username': username, 'nickname': nickname, 'first_name': first_name, 'last_name': last_name,
                 'subscribe_date': subscribe_date}
    user_df = pd.DataFrame(user_dict, index=[0])
    all_users = pd.read_sql(f"SELECT username FROM user_settings", asmi)
    all_users = all_users.username.to_list()
    subscribed_users = pd.read_sql(f"SELECT username FROM user_settings WHERE is_subscribed is True", asmi)
    subscribed_users = subscribed_users.username.to_list()

    # if the user is signing up for the first time | –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ:
    if username not in all_users:
        # Recorded a user in users | –ó–∞–≤–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users
        user_df.to_sql(name='users', con=asmi, if_exists='append', index=False)
        # Recorded the settings for this user, setting them to their default values
        # –ó–∞–≤–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—Å—Ç–∞–Ω–æ–≤–∏–≤ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_settings = pd.read_sql(f"SELECT * FROM user_settings WHERE username = 999999999", asmi)
        user_settings = default_settings
        user_settings.username = username
        user_settings.is_subscribed = True
        user_settings.is_timemachine = True
        user_settings.to_sql(name='user_settings', con=asmi, if_exists='append', index=False)
        bot.send_message(username, success_subscribed_text)

    # if the user subscribed earlier, but unsubscribed | –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–ª—Å—è —Ä–∞–Ω–Ω–µ–µ, –Ω–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è:
    elif username not in subscribed_users:
        with asmi.begin() as conn:
            conn.execute(text(
                f"UPDATE user_settings SET is_subscribed = True, is_timemachine = True WHERE username = '{username}'"))

        bot.send_message(username, success_subscribed_text)

    # if the user tries to re-subscribe | –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ:
    elif username in subscribed_users:
        bot.send_message(username, f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

    else:
        pass


@bot.message_handler(commands=['unsubscribe'])
def handle_unsubscribe(message):
    """
    Unsubscribe from the mailing list by removing the user's participation flag
    –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—É—Ç–µ–º —Å–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–ª–∞–≥–∞ –æ–± —É—á–∞—Å—Ç–∏–∏ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
    """
    username = message.chat.id
    nickname = message.from_user.username
    subscribed_users = pd.read_sql(f"SELECT username FROM user_settings WHERE is_subscribed is True", asmi)
    subscribed_users = subscribed_users.username.to_list()
    if username in subscribed_users:
        with asmi.begin() as conn:
            conn.execute(text(f"UPDATE user_settings SET is_subscribed = False WHERE username = '{username}'"))

        bot.send_message(username, f"–°–ø–∞—Å–∏–±–æ —á—Ç–æ –±—ã–ª —Å –Ω–∞–º–∏, {nickname}! –£–¥–∞—á–∏!")


@bot.message_handler(commands=['timemachine'])
def handle_timemachine(message):
    """
    Responsible for subscribing-unsubscribing to the time-machine option
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É-–æ—Ç–ø–∏—Å–∫—É –Ω–∞ –æ–ø—Ü–∏—é "–º–∞—à–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏"
    """
    username = message.chat.id
    nickname = message.from_user.username
    q = f"SELECT is_timemachine FROM user_settings WHERE username = '{username}'"
    current_status = DataBaseMixin.get(q, asmi)
    try:
        if current_status[0]['is_timemachine'] is True:
            with asmi.begin() as conn:
                conn.execute(text(f"UPDATE user_settings SET is_timemachine = False WHERE username = '{username}'"))
            bot.send_message(username,
                             f"–ú–∞—Ä—Ç–∏ –ú–∞–∫—Ñ–ª–∞–π —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –Ω–µ –ø–æ–∑–≤–æ–ª—è–ª! –°–ø–∞—Å–∏–±–æ —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏, {nickname}, —É–¥–∞—á–∏!")

        elif current_status[0]['is_timemachine'] is False:
            with asmi.begin() as conn:
                conn.execute(text(f"UPDATE user_settings SET is_timemachine = True WHERE username = '{username}'"))
            bot.send_message(username, f"–í–ø–µ—Ä—ë–¥, {nickname}! –ù–∞–∑–∞–¥ –≤ –±—É–¥—É—â–µ–µ!")
    except IndexError:
        bot.send_message(username, f"–ù–∞–∑–∞–¥ –≤ –±—É–¥—É—â–µ–µ –ª–µ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏, {nickname}! üòâ")


@bot.message_handler(commands=['news'])
def handle_news(message):
    """
    Gives the user's digest for the current day
    –û—Ç–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ø–æ–¥–±–æ—Ä–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    """
    username = message.chat.id  # temp_dict –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_date = str(datetime.now().date())
    user_digest(username, parse_date=user_date, part_number=0)


@bot.message_handler(commands=['settings'])
def handle_settings(message):
    """
    Gives subscribed users instructions on how to change the default settings
    –î–∞—ë—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    username = message.chat.id
    nickname = message.from_user.username

    subscribed_users = pd.read_sql(f"SELECT username FROM user_settings WHERE is_subscribed is True", asmi)
    subscribed_users = subscribed_users.username.to_list()

    if username in subscribed_users:
        settings_text = (f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å 3 –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ –ø–æ–ª–∏—Ç–∏–∫–∏.\n"
                         f"–ê –∑–¥–µ—Å—å —Ä–∞—Å—Å–∫–∞–∑–∞–Ω–æ, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n"
                         f"üìó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∫–∞ —Å–ª–æ–∂–Ω–∞—è, –ø—Ä–æ—á—Ç–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ {nickname}!\n\n"
                         f"ü§ñ –Ø —É–º–µ—é —Å–æ–±–∏—Ä–∞—Ç—å —à–µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ —Å–≤–æ–µ–π –±—É–∫–≤—ã:\n"
                         f"–ù - –ù–∞—É–∫–∞\n"
                         f"–ü - –ü–æ–ª–∏—Ç–∏–∫–∞\n"
                         f"–û - –û–±—â–µ—Å—Ç–≤–æ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\n"
                         f"–° - –°–ø–æ—Ä—Ç\n"
                         f"–¢ - –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ IT\n"
                         f"–≠ - –≠–∫–æ–Ω–æ–º–∏–∫–∞\n\n"
                         f""
                         f'–ß—Ç–æ–±—ã —ç—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –Ω—É–∂–Ω–æ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–±—É–∫–≤—ã_—Å–ª–∏—Ç–Ω–æ" "—á–∏—Å–ª–æ"\n'
                         f'–ù–∞–ø—Ä–∏–º–µ—Ä, "–°–¢–≠ 5" –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–æ –ø—è—Ç—å –Ω–æ–≤–æ—Å—Ç–µ–π —Å–ø–æ—Ä—Ç–∞, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏\n'
                         f'–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –ø–æ–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏—à—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—â—ë —Ä–∞–∑\n\n'
                         f'P.S. –ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–≤ –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –Ω–æ —Ç–æ–ª—å–∫–æ —Å–ª–∏—Ç–Ω–æ.\n'
                         f' –ù–µ–ª—å–∑—è –ø–æ—Å–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ')
        bot.send_message(username, settings_text)
    else:
        bot.send_message(username, '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è')


@bot.message_handler(content_types=['text'])
def guess_user_request(message):
    """
    Tries to guess the user's wishes based on the message received from the user and process the request
    –ü—ã—Ç–∞–µ—Ç—Å—è —É–≥–∞–¥–∞—Ç—å –∂–µ–ª–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É –æ—Ç –Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—é
    """
    username = message.chat.id
    answer = message.text
    try:
        valid_date = datetime.strptime(answer, '%Y-%m-%d')
        user_digest(username, parse_date=answer)
    except ValueError:
        try:
            if answer[0].isdigit():
                category_number, label = map(int, answer.split(' '))
                get_full_news(username, answer)
            elif answer[0].isalpha():
                categories_letter = answer.split(' ')[0]
                news_amount = int(answer.split(' ')[1])
                new_user_settings = redefine_user_settings(username, categories_letter, news_amount)
                if type(new_user_settings) == pd.DataFrame and not new_user_settings.empty:
                    bot.send_message(username, '–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã')
                else:
                    bot.send_message(username, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')

        except ValueError:
            bot.send_message(username,
                             '‚ö† –ú–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î) –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–æ–≤–æ—Å—Ç–∏ (–¥–≤–∞ '
                             '—á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).\n'
                             'üìó –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑, –∏–ª–∏ –ø–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫ –±–æ—Ç—É (–∫–æ–º–∞–Ω–¥–∞ "help")')
